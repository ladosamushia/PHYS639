from Tkinter import *
from math import *
from sys import argv
from matplotlib import pyplot as plt
import time
import numpy.random as random
import scipy as sp
import numpy as np
pi = 3.14159265359
global gui
# initiliaze tk object

n=19
dat = [[5.000000000000000000e-01, 1.023071901302725628e+00, 9.613173305543044889e-02],
[1.500000000000000000e+00, 1.037578212766383290e+00, 7.064680670755418834e-02],
[2.500000000000000000e+00, 8.736136530006347600e-01, 6.113372352625978667e-02],
[3.500000000000000000e+00, 1.112665302786128629e+00, 6.470524244756224730e-02],
[4.500000000000000000e+00, 9.717969840095902478e-01, 5.476875364435415672e-02],
[5.500000000000000000e+00, 1.007275797009663298e+00, 7.560845461086862507e-02],
[6.500000000000000000e+00, 1.288049363074247999e+00, 5.870999848891020334e-02],
[7.500000000000000000e+00, 1.193849501584538286e+00, 6.193312327340965567e-02],
[8.500000000000000000e+00, 1.084719036720850571e+00, 7.239841497093693623e-02],
[9.500000000000000000e+00, 9.527433132005557193e-01, 7.790352271513326099e-02],
[1.050000000000000000e+01, 1.047375859141969512e+00, 6.930370027401140665e-02],
[1.150000000000000000e+01, 9.320294988924426871e-01, 7.064480816568319277e-02],
[1.250000000000000000e+01, 1.117004572139276064e+00, 6.449015070485528134e-02],
[1.350000000000000000e+01, 1.010143140841871512e+00, 7.151563606890426472e-02],
[1.450000000000000000e+01, 9.605064758159055360e-01, 8.834617047689861946e-02],
[1.550000000000000000e+01, 1.023272879398691382e+00, 7.366374215888377153e-02],
[1.650000000000000000e+01, 9.198842321181268655e-01, 8.347503365520025920e-02],
[1.750000000000000000e+01, 1.102534960722813873e+00, 7.050911695642747556e-02],
[1.850000000000000000e+01, 8.828335826414679399e-01, 8.946578085361671373e-02],
[1.950000000000000000e+01, 9.246120471984263789e-01, 8.142393307975021033e-02]]

dat_t = np.transpose(dat)
x = dat_t[0]
y = dat_t[1]
err = dat_t[2]

def N(a, e, e0):
    b = 1
    return b + a*exp(-(e-e0)**2)
def hessian(a, e):
	da = 0.001
	de = 0.001
	H = np.empty((2,2))
	H[0][0] = (Xsq2(a + da, e) + Xsq2(a - da, e) - 2*Xsq2(a,e))/(da*da)
	H[1][1] = (Xsq2(a, e + de) + Xsq2(a, e - de) - 2*Xsq2(a,e))/(de*de)
	H[0][1] = (Xsq2(a - da, e - de) + Xsq2(a + da, e + de) - Xsq2(a - da,e + de) - Xsq2(a + da,e - de))/(4*da*de)
	H[1][0] = H[0][1]
	return -H
def Xsq(a, e0):
	i=0
	X = 0
	while(i<=n):
		temp = ((dat[i][1]-N(a, dat[i][0], e0))/(dat[i][2]))**2
		#print(temp, N(a, dat[i][1], e0))
		X += temp
		i = i + 1
	#print(a, e0, X)
	return X
def Xsq2(a, e0):
	return -Xsq(a,e0)/2

mina = 0
mine = 0
minx = 100
ai = 0
ei = 0
st = 0.1
#xt = Xsq(1.25, 7)
#print(xt)
while(ai <= 3):
	ei = 0
	while(ei <= 10):
		xt = Xsq(ai, ei)
		if(xt < minx):
			minx = xt
			mina = ai
			mine = ei
		ei += st
	ai += st

Hess = hessian(mina, mine)
C = np.linalg.inv(Hess)

i = 0
step = 0.05
xlist = []
glist = []
while(i < 20):
	xlist.append(i)
	n = N(mina, i, mine)
	glist.append(n)
	i+=step

print("A = " + str(mina) + " +- " + str(sqrt(C[0][0])))
print("e0 = " + str(mine) + " +- " + str(sqrt(C[1][1])))
print("X2 = " + str(minx))
plt.plot(xlist, glist)
plt.errorbar(x, y, err, fmt='.')
plt.xlabel('E')
plt.ylabel('N')
plt.show()