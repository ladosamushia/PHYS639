#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Nov  6 12:50:49 2018

@author: dylansmac
"""

import numpy as np
import matplotlib.pyplot as plt

# This must be ran before any cell is ran
Ngrid = 100
phi = np.zeros((Ngrid,Ngrid))
phi_new = np.zeros((Ngrid,Ngrid))
Niterations = 100



#%% Box in an area
for i in range(Ngrid):
    for j in range(Ngrid):
        if i >= 40 and i <=60 and j >=40 and j <=60:
            phi[i][j] = 100
        elif i == 0 or j == 0 or i == Ngrid-1 or j == Ngrid-1:
            phi[i][j] = 0
        else:
            phi[i][j] = 0




for k in range(Niterations):
    for i in range(Ngrid):
        for j in range(Ngrid):
            if i >= 40 and i <=60 and j >=40 and j <=60:
                phi_new[i][j] = 100
            elif i == 0 or j == 0 or i == Ngrid-1 or j == Ngrid-1:
                phi_new[i][j] = 0
            else:
                phi_new[i][j] = (phi[i-1][j] + phi[i+1][j] + phi[i][j-1] + phi[i][j+1] +phi[i+1][j+1] + phi[i+1][j-1] + phi[i-1][j+1] + phi[i-1][j-1])/8.0

    phi = np.copy(phi_new)
plt.figure(1)
plt.clf()
plt.imshow(phi)

#%% Parallel plates that are touching

for i in range(Ngrid):
    for j in range(Ngrid):
        if j == 50 and i >= 10 and i<= 90:
            phi[i][j] = 100
#            phi[i][j - 1] = 100
        elif j == 51 and i >=10 and i <= 90:
            phi[i][j] = -100
#            phi[i][j - 1] = -100
        elif i == 0 or j ==0 or i==Ngrid-1 or j==Ngrid-1:
            phi[i][j] = 0
        else:
            phi[i][j] = 0


for k in range(Niterations):
    for i in range(Ngrid):
        for j in range(Ngrid):
            if j == 50 and i >= 10 and i<= 90:
                phi_new[i][j] = 100
#                phi[i][j-1] = 100
            elif j == 51 and i >=10 and i <= 90:
                phi_new[i][j] = -100
#                phi[i][j-1] = -100
            elif i == 0 or j ==0 or i==Ngrid-1 or j==Ngrid-1:
                phi_new[i][j] = 0
            else:
                phi_new[i][j] = (phi[i-1][j] + phi[i+1][j] + phi[i][j-1] + phi[i][j+1] +phi[i+1][j+1] + phi[i+1][j-1] + phi[i-1][j+1] + phi[i-1][j-1])/8.0   


    phi = np.copy(phi_new)
plt.figure(2)
plt.clf()
plt.imshow(phi)

#%% Perpendicular

for i in range(Ngrid):
    for j in range(Ngrid):
        if j == 40 and i >= 10 and i<= 90:
            phi[i][j] = 100
        elif i == 50 and j >=50 and j <= 90:
            phi[i][j] = -100
        elif i == 0 or j ==0 or i==Ngrid-1 or j==Ngrid-1:
            phi[i][j] = 0
        else:
            phi[i][j] = 0


for k in range(Niterations):
    for i in range(Ngrid):
        for j in range(Ngrid):
            if j == 40 and i >= 10 and i<= 90:
                phi_new[i][j] = 100
            elif i == 50 and j >=50 and j <= 90:
                phi_new[i][j] = -100
            elif i == 0 or j ==0 or i==Ngrid-1 or j==Ngrid-1:
                phi_new[i][j] = 0
            else:
                phi_new[i][j] = (phi[i-1][j] + phi[i+1][j] + phi[i][j-1] + phi[i][j+1] +phi[i+1][j+1] + phi[i+1][j-1] + phi[i-1][j+1] + phi[i-1][j-1])/8.0   


    phi = np.copy(phi_new)
plt.figure(3)
plt.clf()
plt.imshow(phi)
    
#%% Points

for i in range(Ngrid):
    for j in range(Ngrid):
        if j == 50 and i ==50:
            phi[i][j] = 100
        elif i == 0 or j ==0 or i==Ngrid-1 or j==Ngrid-1:
            phi[i][j] = 0
        else:
            phi[i][j] = 0


for k in range(Niterations):
    for i in range(Ngrid):
        for j in range(Ngrid):
            if j == 50 and i ==50:
                phi_new[i][j] = 100
            elif i == 0 or j ==0 or i==Ngrid-1 or j==Ngrid-1:
                phi_new[i][j] = 0
            else:
                phi_new[i][j] = (phi[i-1][j] + phi[i+1][j] + phi[i][j-1] + phi[i][j+1] +phi[i+1][j+1] + phi[i+1][j-1] + phi[i-1][j+1] + phi[i-1][j-1])/8.0   


    phi = np.copy(phi_new)
plt.figure(4)
plt.clf()
plt.imshow(phi)